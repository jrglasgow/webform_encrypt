<?php

/**
 * @file
 * Main module file for the Webform Encrypt module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\encrypt\Entity\EncryptionProfile;
use Drupal\webform\Entity\WebformSubmission;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function webform_encrypt_form_webform_ui_element_form_alter(&$form, FormStateInterface $form_state) {
  /** @var \Drupal\webform\WebformElementManagerInterface $element_manager */
  $element_manager = \Drupal::service('plugin.manager.webform.element');

  $element = $form_state->getBuildInfo()['callback_object']->getElement();
  $element_handler = $element_manager->getElementInstance($element);

  // Checks whether the element carries a value.
  // Only input elements are allowed to be encrypted.
  $is_input_element = $element_handler->isInput($element);
  if ($is_input_element) {
    // To provide the fieldset for encryption fields on element config form.
    $form['element_encrypt'] = [
      '#type' => 'details',
      '#title' => t('Encryption'),
    ];

    // To provide the encryption fields for webform elements.
    $form['element_encrypt']['encrypt'] = [
      '#type' => 'webform_element_encrypt',
      '#title' => t('Encryption'),
      '#title_display' => 'hidden',
    ];
  }
}

/**
 * Implements hook_entity_presave().
 */
function webform_encrypt_entity_presave(EntityInterface $entity) {
  if ($entity instanceof WebformSubmission) {
    $config = \Drupal::service('config.factory')->get('webform.encrypt')->get('element.settings');
    $data_original = $entity->getData();

    $encryption = Drupal::service('encryption');

    foreach ($data_original as $key => $value) {
      if (empty($config[$key]['encrypt'])) {
        // Encryption is disabled to this field.
        $data[$key] = $value;

        continue;
      }

      $encryption_profile = EncryptionProfile::load($config[$key]['encrypt_profile']);

      // Checks whether is an element with multiple values.
      if (is_array($value)) {
        $multiple_values = [];
        foreach ($value as $multiple_values_key => $multiple_values_value) {
          $multiple_values[$multiple_values_key] = $encryption->encrypt($multiple_values_value, $encryption_profile);
        }
        $data[$key] = $multiple_values;

        continue;
      }

      // Single element value.
      $data[$key] = $encryption->encrypt($value, $encryption_profile);
    }

    $entity->setData($data);
  }
}

/**
 * Implements hook_entity_type_alter().
 */
function webform_encrypt_entity_type_alter(array &$entity_types) {
  /* @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */
  $entity_types['webform_submission']->setStorageClass('Drupal\webform_encrypt\WebformEncryptSubmissionStorage');
}
